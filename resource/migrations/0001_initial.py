# -*- coding: utf-8 -*-
# Generated by Django 1.11.25 on 2020-01-30 14:04
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import resource.models
import uuid


class Migration(migrations.Migration):

    initial = True

    # dependencies = [
    #     ('idgo_admin', '0002_auto_20200117_1628'),
    # ]

    dependencies = [
        ('idgo_admin', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synchronise', models.BooleanField(default=False, verbose_name='Synchronisation de données distante')),
                ('sync_frequency', models.CharField(blank=True, choices=[('1hour', 'Toutes les heures'), ('3hours', 'Toutes les trois heures'), ('6hours', 'Toutes les six heures'), ('daily', 'Quotidienne (tous les jours à minuit)'), ('weekly', 'Hebdomadaire (tous les lundi)'), ('bimonthly', 'Bimensuelle (1er et 15 de chaque mois)'), ('monthly', 'Mensuelle (1er de chaque mois)'), ('quarterly', 'Trimestrielle (1er des mois de janvier, avril, juillet, octobre)'), ('biannual', 'Semestrielle (1er janvier et 1er juillet)'), ('annual', 'Annuelle (1er janvier)'), ('never', 'Jamais'), ('5mn', 'Toutes les 5 minutes'), ('15mn', 'Toutes les 15 minutes'), ('20mn', 'Toutes les 20 minutes'), ('30mn', 'Toutes les 30 minutes')], default='never', max_length=20, null=True, verbose_name='Fréquence de synchronisation')),
                ('url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Référencer une URL')),
            ],
            options={
                'verbose_name': 'Ressource Téléchargée depuis une URL distante',
                'db_table': 'resource_download',
                'verbose_name_plural': 'Ressources Téléchargées depuis une URL distante',
            },
        ),
        migrations.CreateModel(
            name='Ftp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.FileField(blank=True, db_column='file', null=True, upload_to=resource.models._ftp_file_upload_to, verbose_name='Fichier')),
            ],
            options={
                'verbose_name': 'Ressource FTP',
                'db_table': 'resource_ftp',
                'verbose_name_plural': 'Ressources FTP',
            },
        ),
        migrations.CreateModel(
            name='Href',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synchronise', models.BooleanField(default=False, verbose_name='Synchronisation de données distante')),
                ('sync_frequency', models.CharField(blank=True, choices=[('1hour', 'Toutes les heures'), ('3hours', 'Toutes les trois heures'), ('6hours', 'Toutes les six heures'), ('daily', 'Quotidienne (tous les jours à minuit)'), ('weekly', 'Hebdomadaire (tous les lundi)'), ('bimonthly', 'Bimensuelle (1er et 15 de chaque mois)'), ('monthly', 'Mensuelle (1er de chaque mois)'), ('quarterly', 'Trimestrielle (1er des mois de janvier, avril, juillet, octobre)'), ('biannual', 'Semestrielle (1er janvier et 1er juillet)'), ('annual', 'Annuelle (1er janvier)'), ('never', 'Jamais'), ('5mn', 'Toutes les 5 minutes'), ('15mn', 'Toutes les 15 minutes'), ('20mn', 'Toutes les 20 minutes'), ('30mn', 'Toutes les 30 minutes')], default='never', max_length=20, null=True, verbose_name='Fréquence de synchronisation')),
                ('url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Référencer une URL')),
            ],
            options={
                'verbose_name': 'Ressource référençant une URL',
                'db_table': 'resource_href',
                'verbose_name_plural': 'Ressources référençant une URL',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ckan_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Ckan UUID')),
                ('title', models.TextField(verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('language', models.CharField(choices=[('french', 'Français'), ('english', 'Anglais'), ('italian', 'Italien'), ('german', 'Allemand'), ('other', 'Autre')], default='french', max_length=10, verbose_name='Langue')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Date de création de la resource')),
                ('last_update', models.DateTimeField(blank=True, null=True, verbose_name='Date de dernière modification de la resource')),
                ('resource_type', models.CharField(choices=[('raw', 'Données brutes'), ('annexe', 'Documentation associée'), ('service', 'Service')], default='raw', max_length=10, verbose_name='Type de la ressource')),
                ('dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='idgo_resources', to='idgo_admin.Dataset', verbose_name='Jeu de données')),
            ],
            options={
                'verbose_name': 'Ressource',
                'verbose_name_plural': 'Ressources',
            },
        ),
        migrations.CreateModel(
            name='ResourceFormats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(verbose_name='Description')),
                ('extension', models.CharField(max_length=10, verbose_name='Extension du fichier')),
                ('mimetype', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None, verbose_name='Type MIME')),
                ('protocol', models.CharField(blank=True, max_length=100, null=True, verbose_name='Protocole')),
                ('ckan_format', models.CharField(max_length=10, verbose_name='Format CKAN')),
                ('ckan_view', models.CharField(blank=True, choices=[(None, 'N/A'), ('text_view', 'text_view'), ('geo_view', 'geo_view'), ('recline_view', 'recline_view'), ('pdf_view', 'pdf_view')], max_length=100, null=True, verbose_name='Vue CKAN')),
                ('is_gis_format', models.BooleanField(default=False, verbose_name='Format de fichier SIG')),
            ],
            options={
                'verbose_name': 'Format de ressource',
                'verbose_name_plural': 'Formats de ressource',
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.FileField(blank=True, db_column='file', null=True, upload_to=resource.models._ftp_file_upload_to, verbose_name='Fichier')),
                ('resource', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='resource.Resource')),
            ],
            options={
                'verbose_name': 'Ressource pour le stockage de fichiers',
                'db_table': 'resource_store',
                'verbose_name_plural': 'Ressources pour le stockage de fichiers',
            },
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.FileField(blank=True, db_column='file', null=True, upload_to=resource.models._ftp_file_upload_to, verbose_name='Fichier')),
                ('resource', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='resource.Resource')),
            ],
            options={
                'verbose_name': 'Ressource téléversée',
                'db_table': 'resource_upload',
                'verbose_name_plural': 'Ressources téléversées',
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='format_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='resource.ResourceFormats', verbose_name='Format'),
        ),
        migrations.AddField(
            model_name='href',
            name='resource',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='resource.Resource'),
        ),
        migrations.AddField(
            model_name='ftp',
            name='resource',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='resource.Resource'),
        ),
        migrations.AddField(
            model_name='download',
            name='resource',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='resource.Resource'),
        ),
    ]
